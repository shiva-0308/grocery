<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Business Registration</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; background: #111; color: #fff; }
    form { max-width: 900px; margin: auto; background: #222; padding: 20px; border-radius: 8px; }
    h2 { text-align: center; margin-bottom: 20px; color: #ffcc00; }
    label { display: block; margin-top: 12px; font-weight: bold; }
    input, select { width: 100%; padding: 10px; margin-top: 5px; border: 1px solid #555; border-radius: 5px; background: #333; color: #fff; font-size: 15px; }
    input:focus, select:focus { outline: none; border-color: #ffcc00; }
    table { width: 100%; border-collapse: collapse; margin-top: 20px; background: #333; color: #fff; }
    th, td { border: 1px solid #555; padding: 10px; text-align: center; }
    button { margin-top: 20px; padding: 12px 20px; font-size: 16px; background: #ffcc00; border: none; border-radius: 5px; color: #000; cursor: pointer; font-weight: bold; }
    button:hover { background: #ffaa00; }
    #message { text-align: center; margin-top: 15px; font-size: 18px; font-weight: bold; }
  </style>
</head>
<body>
  <h2>Business & Owner Details</h2>
  <form id="mainForm">
    <label>Business Name <input type="text" name="businessName" required></label>
    <label>Business Mobile Number <input type="text" name="businessMobile" required></label>
    <label>Owner Name <input type="text" name="ownerName" required></label>
    <label>Owner Mobile Number <input type="text" name="ownerMobile" required></label>
    <label>Business Type <input type="text" name="type" required></label>
    <label>Timings <input type="text" name="timings" required></label>
    <label>Location <input type="text" name="location" required></label>
    <h2>Items Requirement</h2>
    <table id="itemTable">
      <thead>
        <tr>
          <th>Item Name</th>
          <th>Quantity</th>
          <th>Unit</th>
          <th>Buying Price (₹)</th>
          <th>Selling Price (₹)</th>
          <th>Requirement Type</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="itemTableBody">
        <tr>
          <td><input type="text" name="itemName" required></td>
          <td><input type="number" name="quantity" required></td>
          <td>
            <select name="unit" required>
              <option value="">Select</option>
              <option value="Kg">Kg</option>
              <option value="Ltr">Ltr</option>
              <option value="Piece">Piece</option>
            </select>
          </td>
          <td><input type="number" step="0.01" name="buyingPrice" required></td>
          <td><input type="number" step="0.01" name="sellingPrice" required></td>
          <td>
            <select name="requirementType" required>
              <option value="">Select</option>
              <option value="Daily">Daily</option>
              <option value="Weekly">Weekly</option>
              <option value="Monthly">Monthly</option>
              <option value="On Order">On Order</option>
              <option value="Custom">Custom</option>
            </select>
          </td>
          <td><button type="button" onclick="removeItemRow(this)">Remove</button></td>
        </tr>
      </tbody>
    </table>
    <button type="button" onclick="addItemRow()">+ Add Item</button>
    <button type="submit">Submit</button>
    <div id="message"></div>
  </form>
  <script>
    function addItemRow() {
      const tbody = document.getElementById("itemTableBody");
      const row = document.createElement("tr");
      row.innerHTML = `
        <td><input type="text" name="itemName" required></td>
        <td><input type="number" name="quantity" required></td>
        <td>
          <select name="unit" required>
            <option value="">Select</option>
            <option value="Kg">Kg</option>
            <option value="Ltr">Ltr</option>
            <option value="Piece">Piece</option>
          </select>
        </td>
        <td><input type="number" step="0.01" name="buyingPrice" required></td>
        <td><input type="number" step="0.01" name="sellingPrice" required></td>
        <td>
          <select name="requirementType" required>
            <option value="">Select</option>
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
            <option value="Monthly">Monthly</option>
            <option value="On Order">On Order</option>
            <option value="Custom">Custom</option>
          </select>
        </td>
        <td><button type="button" onclick="removeItemRow(this)">Remove</button></td>
      `;
      tbody.appendChild(row);
    }
    function removeItemRow(btn) {
      btn.closest("tr").remove();
    }
    document.getElementById("mainForm").addEventListener("submit", function(e) {
      e.preventDefault();
      const form = this;
      const messageBox = document.getElementById("message");
      // Validate all required fields
      const inputs = form.querySelectorAll("input[required], select[required]");
      for (let inp of inputs) {
        if (!inp.value.trim()) {
          messageBox.style.color = "red";
          messageBox.innerText = "Please fill all fields.";
          inp.focus();
          return;
        }
      }
      // Validate mobile numbers (exactly 10 digits)
      const businessMobile = form.businessMobile.value;
      const ownerMobile = form.ownerMobile.value;
      if (businessMobile.length !== 10 || ownerMobile.length !== 10) {
        messageBox.style.color = "red";
        messageBox.innerText = "Mobile numbers must be exactly 10 digits.";
        return;
      }
      if (businessMobile === ownerMobile) {
        messageBox.style.color = "red";
        messageBox.innerText = "Business and Owner Mobile must be different.";
        return;
      }
      // Collect items as array
      const items = [];
      document.querySelectorAll("#itemTableBody tr").forEach(row => {
        items.push({
          itemName: row.querySelector('input[name="itemName"]').value,
          quantity: row.querySelector('input[name="quantity"]').value,
          unit: row.querySelector('select[name="unit"]').value,
          buyingPrice: row.querySelector('input[name="buyingPrice"]').value,
          sellingPrice: row.querySelector('input[name="sellingPrice"]').value,
          requirementType: row.querySelector('select[name="requirementType"]').value
        });
      });
      // Prepare data object
      const data = {
        businessName: form.businessName.value,
        businessMobile: form.businessMobile.value,
        ownerName: form.ownerName.value,
        ownerMobile: form.ownerMobile.value,
        type: form.type.value,
        timings: form.timings.value,
        location: form.location.value,
        items: items
      };
      fetch("/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      })
      .then(res => res.json())
      .then(resp => {
        if (resp.success) {
          messageBox.style.color = "limegreen";
          messageBox.innerText = resp.message;
          form.reset();
          document.getElementById("itemTableBody").innerHTML = "";
          addItemRow();
        } else {
          messageBox.style.color = "red";
          messageBox.innerText = resp.message || "Error submitting form.";
        }
      })
      .catch(err => {
        console.error(err);
        messageBox.style.color = "red";
        messageBox.innerText = "Error submitting form.";
      });
    });
    // Add initial item row if none exists
    if (document.querySelectorAll("#itemTableBody tr").length === 0) {
      addItemRow();
    }
  </script>
</body>
</html>
      const data = {
        businessName: form.businessName.value,
        businessMobile: form.businessMobile.value,
        ownerName: form.ownerName.value,
        ownerMobile: form.ownerMobile.value,
        type: form.type.value,
        timings: form.timings.value,
        location: form.location.value,
        items: []
      };

      // Collect all item rows
      const rows = document.querySelectorAll("#itemTable tbody tr");
      for (let row of rows) {
        data.items.push({
          itemName: row.querySelector('input[name="itemName"]').value,
          quantity: row.querySelector('input[name="quantity"]').value,
          unit: row.querySelector('select[name="unit"]').value,
          buyingPrice: row.querySelector('input[name="buyingPrice"]').value,
          sellingPrice: row.querySelector('input[name="sellingPrice"]').value,
          requirementType: row.querySelector('select[name="requirementType"]').value
        });
      }

      // Send to backend
      fetch("/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      })
      .then(res => res.json())
      .then(resp => {
        if (resp.success) {
          messageBox.style.color = "limegreen";
          messageBox.innerText = "Form submitted successfully!";
        } else {
          messageBox.style.color = "red";
          messageBox.innerText = resp.message || "Error submitting form.";
        }
      })
      .catch(err => {
        console.error(err);
        messageBox.style.color = "red";
        messageBox.innerText = "Error submitting form.";
      });
    });
  </script>
</body>
</html>


******************************************************************************************************************************************

from flask import Flask, request, jsonify, render_template
import sqlite3
import re

app = Flask(__name__)

# ---------- DB Setup ----------
def init_db():
    conn = sqlite3.connect("g.db")
    c = conn.cursor()

    # Main Form Table
    c.execute('''CREATE TABLE IF NOT EXISTS business (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        business_name TEXT NOT NULL,
        business_mobile TEXT NOT NULL,
        business_type TEXT NOT NULL,
        timings TEXT NOT NULL,
        owner_name TEXT NOT NULL,
        owner_mobile TEXT NOT NULL,
        location TEXT NOT NULL
    )''')

    # Items Table
    c.execute('''CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        business_id INTEGER NOT NULL,
        item_name TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        unit TEXT NOT NULL,
        buying_price REAL NOT NULL,
        selling_price REAL NOT NULL,
        requirement_type TEXT NOT NULL,
        FOREIGN KEY (business_id) REFERENCES business(id)
    )''')

    conn.commit()
    conn.close()

# Run DB setup on start
init_db()

# ---------- Validation ----------
def validate_mobile(mobile):
    return bool(re.fullmatch(r'[6-9]\d{9}', mobile))

# ---------- Routes ----------
@app.route("/")
def index():
    return render_template("form.html")   # keep your form.html inside templates/


@app.route("/submit", methods=["POST"])
def submit_form():
    data = request.get_json(force=True)
    print("Received data:", data)

    # Extract fields
    business_name = data.get("businessName", "").strip()
    business_mobile = data.get("businessMobile", "").strip()
    owner_name = data.get("ownerName", "").strip()
    owner_mobile = data.get("ownerMobile", "").strip()
    business_type = data.get("type", "").strip()
    timings = data.get("timings", "").strip()
    location = data.get("location", "").strip()

    items = data.get("items", [])

    # Validation
    required_fields = [business_name, business_mobile, business_type, timings, owner_name, owner_mobile, location]
    if any(f == "" for f in required_fields):
        return jsonify({"success": False, "message": "All fields must be filled!"}), 400

    if not validate_mobile(business_mobile) or not validate_mobile(owner_mobile):
        return jsonify({"success": False, "message": "Invalid mobile number(s)."}), 400

    if business_mobile == owner_mobile:
        return jsonify({"success": False, "message": "Business and Owner Mobile must be different."}), 400

    for item in items:
        if not item["itemName"] or not str(item["quantity"]).isdigit() or not item["unit"] \
           or not str(item["buyingPrice"]).replace('.', '', 1).isdigit() \
           or not str(item["sellingPrice"]).replace('.', '', 1).isdigit() \
           or not item["requirementType"]:
            return jsonify({"success": False, "message": "Invalid item entry!"}), 400

    # Save to DB
    try:
        conn = sqlite3.connect("g.db")
        c = conn.cursor()

        # Insert business
        c.execute('''INSERT INTO business 
            (business_name, business_mobile, business_type, timings, owner_name, owner_mobile, location)
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (business_name, business_mobile, business_type, timings, owner_name, owner_mobile, location))

        business_id = c.lastrowid

        # Insert items
        for item in items:
            c.execute('''INSERT INTO items 
                (business_id, item_name, quantity, unit, buying_price, selling_price, requirement_type)
                VALUES (?, ?, ?, ?, ?, ?, ?)''',
                (business_id,
                 item["itemName"],
                 int(item["quantity"]),
                 item["unit"],
                 float(item["buyingPrice"]),
                 float(item["sellingPrice"]),
                 item["requirementType"]))

        conn.commit()
        conn.close()
        return jsonify({"success": True, "message": "Form submitted successfully!"}), 200

    except Exception as e:
        print("DB Error:", str(e))
        return jsonify({"success": False, "message": "Database error!"}), 500


@app.route("/view")
def view_data():
    conn = sqlite3.connect("g.db")
    c = conn.cursor()
    c.execute("SELECT * FROM business")
    businesses = c.fetchall()
    html = """
    <h2 style='text-align:center;color:#ffcc00;'>Stored Business Data</h2>
    <table border="1" cellpadding="10" cellspacing="0" style="width:95%;margin:auto;background:#222;color:#fff;">
      <tr>
        <th>ID</th><th>Business Name</th><th>Business Mobile</th>
        <th>Business Type</th><th>Timings</th><th>Owner Name</th><th>Owner Mobile</th><th>Location</th><th>Items</th>
      </tr>
    """
    for b in businesses:
        c.execute("SELECT item_name, quantity, unit, buying_price, selling_price, requirement_type FROM items WHERE business_id=?", (b[0],))
        items = c.fetchall()
        items_html = "<ul>"
        for it in items:
            items_html += f"<li>{it[0]} - {it[1]} {it[2]} | Buy ₹{it[3]} | Sell ₹{it[4]} | {it[5]}</li>"
        items_html += "</ul>"
        html += f"""
        <tr>
          <td>{b[0]}</td><td>{b[1]}</td><td>{b[2]}</td>
          <td>{b[3]}</td><td>{b[4]}</td>
          <td>{b[5]}</td><td>{b[6]}</td><td>{b[7]}</td>
          <td>{items_html}</td>
        </tr>
        """
    html += "</table>"
    conn.close()
    return html


if __name__ == "__main__":
    app.run(debug=True)

